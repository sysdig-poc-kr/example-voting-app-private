name: Build, Scan & Push to Harbor
# 통합 워크플로우: 이미지 빌드, 보안 스캔, Harbor Registry 푸시

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'vote/**'
      - 'worker/**'
      - 'result/**'
      - 'k8s-specifications/**'
      - '.github/workflows/build-scan-push.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'vote/**'
      - 'worker/**'
      - 'result/**'
      - 'k8s-specifications/**'
      - '.github/workflows/build-scan-push.yaml'

env:
  HARBOR_REGISTRY: hw-harbor.bluesunnywings.com
  HARBOR_PROJECT: sysdig-poc

jobs:
  # 변경된 서비스 감지
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      vote: ${{ steps.changes.outputs.vote }}
      worker: ${{ steps.changes.outputs.worker }}
      result: ${{ steps.changes.outputs.result }}
      iac: ${{ steps.changes.outputs.iac }}
      any-service: ${{ steps.changes.outputs.vote == 'true' || steps.changes.outputs.worker == 'true' || steps.changes.outputs.result == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Detect Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            vote:
              - 'vote/**'
            worker:
              - 'worker/**'
            result:
              - 'result/**'
            iac:
              - 'k8s-specifications/**'

  # Infrastructure as Code (IaC) 보안 스캔
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.iac == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Sysdig IaC Security Scan
        uses: sysdiglabs/scan-action@v6
        with:
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          cli-scanner-version: 1.22.5
          mode: iac
          iac-scan-path: ./k8s-specifications
          recursive: true
          minimum-severity: medium
          stop-on-failed-policy-eval: false
          stop-on-processing-error: false

  # 서비스별 빌드, 스캔, 푸시
  build-scan-push:
    name: Build, Scan & Push
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-service == 'true'
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    
    strategy:
      matrix:
        service: [vote, worker, result]
        include:
          - service: vote
            context: ./vote
            dockerfile: ./vote/Dockerfile
            build-target: final
          - service: worker
            context: ./worker
            dockerfile: ./worker/Dockerfile
            build-target: ""
          - service: result
            context: ./result
            dockerfile: ./result/Dockerfile
            build-target: ""
    
    steps:
      - name: Check if service changed
        id: check-service
        run: |
          if [[ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Service ${{ matrix.service }} has changes - will build and scan"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Service ${{ matrix.service }} has no changes - skipping"
          fi

      - name: Checkout Repository
        if: steps.check-service.outputs.should_build == 'true'
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        if: steps.check-service.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Harbor Registry
        if: steps.check-service.outputs.should_build == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          
      - name: Extract metadata
        if: steps.check-service.outputs.should_build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      # 로컬 스캔용 이미지 빌드
      - name: Build image for scanning
        if: steps.check-service.outputs.should_build == 'true'
        run: |
          if [[ "${{ matrix.build-target }}" != "" ]]; then
            docker build --platform linux/amd64 --target ${{ matrix.build-target }} -t ${{ matrix.service }}-scan:${{ github.sha }} ${{ matrix.context }}
          else
            docker build --platform linux/amd64 -t ${{ matrix.service }}-scan:${{ github.sha }} ${{ matrix.context }}
          fi
          
      # Sysdig 보안 스캔
      - name: Sysdig Security Scan
        if: steps.check-service.outputs.should_build == 'true'
        id: scan
        uses: sysdiglabs/scan-action@v6
        with:
          image-tag: ${{ matrix.service }}-scan:${{ github.sha }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          cli-scanner-version: 1.22.5
          mode: vm
          severity-at-least: medium
          stop-on-failed-policy-eval: false
          stop-on-processing-error: false

      # Harbor Registry에 푸시 (스캔 성공 후)
      - name: Build and push to Harbor Registry
        if: steps.check-service.outputs.should_build == 'true' && github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ matrix.build-target }}

      # GitHub Security에 SARIF 업로드
      - name: Upload SARIF Report
        if: steps.check-service.outputs.should_build == 'true' && (success() || failure())
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/sarif.json

      # 스캔 결과 아티팩트 저장
      - name: Archive Scan Results
        if: steps.check-service.outputs.should_build == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-scan-results-${{ github.sha }}
          path: |
            sarif.json
            scan-result.json
          if-no-files-found: warn

      # PR 코멘트 (PR인 경우)
      - name: Comment on PR
        if: steps.check-service.outputs.should_build == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const service = '${{ matrix.service }}';
            const serviceEmoji = {
              'vote': '🗳️',
              'worker': '⚙️', 
              'result': '📊'
            };
            
            const output = `#### ${serviceEmoji[service]} ${service.charAt(0).toUpperCase() + service.slice(1)} Service Build & Scan
            
            **Harbor Registry:** \`${{ env.HARBOR_REGISTRY }}\`
            **Project:** \`${{ env.HARBOR_PROJECT }}\`
            **Image:** \`${service}\`
            
            **Tags:** 
            \`\`\`
            ${{ steps.meta.outputs.tags }}
            \`\`\`
            
            **Status:** ✅ Build & Security Scan completed
            **Platform:** \`linux/amd64\` (Sysdig compatible)
            **Scan Results:** Available in workflow artifacts
            
            > 📝 **Note**: Image not pushed to Harbor Registry for PR builds
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # 워크플로우 요약
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, iac-scan, build-scan-push]
    if: always()
    
    steps:
      - name: Workflow Summary
        run: |
          echo "## 🚀 Build, Scan & Push Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Components:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🗳️ **Vote**: ${{ needs.detect-changes.outputs.vote == 'true' && '✅ Built & Scanned' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚙️ **Worker**: ${{ needs.detect-changes.outputs.worker == 'true' && '✅ Built & Scanned' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Result**: ${{ needs.detect-changes.outputs.result == 'true' && '✅ Built & Scanned' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ **IaC**: ${{ needs.detect-changes.outputs.iac == 'true' && '✅ Scanned' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ **Registry**: \`${{ env.HARBOR_REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Project**: \`${{ env.HARBOR_PROJECT }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- 🖥️ **Platform**: \`linux/amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 **Security**: Sysdig scan with medium+ severity" >> $GITHUB_STEP_SUMMARY
          echo "- 📤 **Push**: ${{ github.event_name != 'pull_request' && 'Enabled' || 'Disabled (PR)' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ **Workflow**: Intelligent change detection ensures only modified services are built and scanned." >> $GITHUB_STEP_SUMMARY

name: Vote Service with Cosign

"on":
  push:
    branches: [ main, develop ]
    paths: [ 'vote/**', '.github/workflows/vote-with-cosign.yaml' ]
  pull_request:
    branches: [ main ]
    paths: [ 'vote/**', '.github/workflows/vote-with-cosign.yaml' ]
  workflow_dispatch:

# Prevent concurrent GitOps updates for this service only
concurrency:
  group: gitops-update-vote
  cancel-in-progress: false

env:
  HARBOR_REGISTRY: hw-harbor.bluesunnywings.com
  HARBOR_PROJECT: sysdig-poc
  SERVICE: vote

jobs:
  build-scan-sign-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      pull-requests: write
      id-token: write  # Cosign OIDC 토큰을 위해 추가
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: docker/setup-buildx-action@v3
      
      # Cosign 설치 추가
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'
        
      - name: Harbor Login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build for Scan
        run: docker build --platform linux/amd64 --target final -t ${{ env.SERVICE }}-scan:${{ github.sha }} ./vote
          
      - name: Security Scan
        uses: sysdiglabs/scan-action@v6
        with:
          image-tag: ${{ env.SERVICE }}-scan:${{ github.sha }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          mode: vm
          severity-at-least: medium
          stop-on-failed-policy-eval: false

      # 스캔 통과 시에만 Harbor에 푸시
      - name: Push to Harbor (Docker v2 Compatible)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./vote
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}
          target: final
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          outputs: type=image,oci-mediatypes=false

      # 푸시된 이미지에 Cosign 서명 추가
      - name: Sign Image with Cosign
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "🔐 Signing image with Cosign..."
          
          # 키리스 서명 (OIDC 기반)
          cosign sign --yes ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}
          
          echo "✅ Image signed successfully"
          
          # 서명 검증
          echo "🔍 Verifying signature..."
          cosign verify ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }} \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com"
          
          echo "✅ Signature verification successful"

      # 서명된 이미지로 새 태그 생성 및 푸시
      - name: Create and Push Signed Tag
        if: github.event_name != 'pull_request'
        run: |
          echo "🏷️ Creating signed tag..."
          
          # 서명된 이미지임을 나타내는 태그 생성
          docker pull ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}
          docker tag ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }} \
            ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}-signed
          
          # latest-signed 태그도 생성
          docker tag ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }} \
            ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-latest-signed
          
          # 서명된 태그들 푸시
          docker push ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}-signed
          docker push ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-latest-signed
          
          echo "✅ Signed tags pushed successfully"

      - name: Update GitOps Manifest
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          # Configure git
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 서명된 이미지 태그로 매니페스트 업데이트
          sed -i "s|image: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:.*|image: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}-signed|g" manifests/vote/deployment.yaml
          
          # Check if there are changes to commit
          if git diff --quiet manifests/vote/deployment.yaml; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit changes
          git add manifests/vote/deployment.yaml
          git commit -m "🚀🔐 Update ${{ env.SERVICE }} to signed image v2-${{ github.sha }}-signed"
          
          # Push with robust retry and conflict resolution
          for i in {1..10}; do
            echo "🔄 Push attempt $i/10"
            
            git fetch origin main
            
            if git push origin HEAD:main; then
              echo "✅ Successfully pushed changes on attempt $i"
              break
            else
              echo "❌ Push failed on attempt $i, resolving conflicts..."
              
              git reset --hard HEAD~1
              git pull --rebase origin main
              
              # Re-apply our changes with signed image
              sed -i "s|image: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:.*|image: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}-signed|g" manifests/vote/deployment.yaml
              
              if ! git diff --quiet manifests/vote/deployment.yaml; then
                git add manifests/vote/deployment.yaml
                git commit -m "🚀🔐 Update ${{ env.SERVICE }} to signed image v2-${{ github.sha }}-signed"
              else
                echo "✅ Changes already applied by another workflow"
                break
              fi
              
              if [ $i -eq 10 ]; then
                echo "❌ Failed to push after 10 attempts"
                exit 1
              fi
              
              sleep_time=$((i * 2 + RANDOM % 5))
              echo "⏳ Waiting ${sleep_time}s before retry..."
              sleep $sleep_time
            fi
          done

      - name: Upload SARIF
        if: always() && hashFiles('sarif.json') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.json

      - name: Archive Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SERVICE}}-scan-${{ github.sha }}
          path: |
            sarif.json
            scan-result.json
          if-no-files-found: ignore

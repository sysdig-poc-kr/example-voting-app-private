name: Vote Service - Cosign Best Practice

"on":
  push:
    branches: [ main, develop ]
    paths: [ 'vote/**', '.github/workflows/vote-cosign-best-practice.yaml' ]
  pull_request:
    branches: [ main ]
    paths: [ 'vote/**', '.github/workflows/vote-cosign-best-practice.yaml' ]
  workflow_dispatch:

concurrency:
  group: gitops-update-vote
  cancel-in-progress: false

env:
  HARBOR_REGISTRY: hw-harbor.bluesunnywings.com
  HARBOR_PROJECT: sysdig-poc
  SERVICE: vote

jobs:
  build-scan-sign-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      pull-requests: write
      id-token: write  # Cosign OIDC
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: docker/setup-buildx-action@v3
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'
        
      - name: Harbor Login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      # 1. Build for scanning (local only)
      - name: Build for Scan
        run: docker build --platform linux/amd64 --target final -t ${{ env.SERVICE }}-scan:${{ github.sha }} ./vote
          
      # 2. Security scan (before push)
      - name: Security Scan
        uses: sysdiglabs/scan-action@v6
        with:
          image-tag: ${{ env.SERVICE }}-scan:${{ github.sha }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          mode: vm
          severity-at-least: medium
          stop-on-failed-policy-eval: false

      # 3. Build and push final image (only after scan passes)
      - name: Build and Push Final Image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./vote
          platforms: linux/amd64
          push: true
          # üéØ Îã®Ïùº ÌÉúÍ∑∏ Ï†ÑÎûµ: semantic versioning + commit sha
          tags: |
            ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}
            ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:latest
          target: final
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          outputs: type=image,oci-mediatypes=false

      # 4. Sign the pushed image (single signature)
      - name: Sign Image with Cosign
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "üîê Signing images with Cosign..."
          
          # Sign both tags (they point to the same image)
          cosign sign --yes ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}
          cosign sign --yes ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:latest
          
          echo "‚úÖ Images signed successfully"

      # 5. Verify signatures
      - name: Verify Signatures
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "üîç Verifying signatures..."
          
          cosign verify ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }} \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com"
          
          cosign verify ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:latest \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com"
          
          echo "‚úÖ Signature verification successful"

      # 6. Update GitOps manifest (use signed image)
      - name: Update GitOps Manifest
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # ÏÑúÎ™ÖÎêú Ïù¥ÎØ∏ÏßÄÎ°ú Îß§ÎãàÌéòÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
          sed -i "s|image: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:.*|image: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.SERVICE }}:v2-${{ github.sha }}|g" manifests/vote/deployment.yaml
          
          # Cosign ÏÑúÎ™Ö Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä (Ï†ïÏ±ÖÏóêÏÑú ÌôïÏù∏Ïö©)
          # Deployment Î†àÎ≤®Ïóê Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖò Ï∂îÍ∞Ä
          if ! grep -q "cosign.sigstore.dev/verified" manifests/vote/deployment.yaml; then
            # Find the line with 'metadata:' under 'kind: Deployment' and add annotation
            awk '
            /^kind: Deployment/ { in_deployment = 1 }
            /^---/ { in_deployment = 0 }
            /^metadata:/ && in_deployment && !added {
              print $0
              print "  annotations:"
              print "    cosign.sigstore.dev/verified: \"true\""
              print "    cosign.sigstore.dev/signed-at: \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\""
              added = 1
              next
            }
            { print }
            ' manifests/vote/deployment.yaml > manifests/vote/deployment.yaml.tmp
            mv manifests/vote/deployment.yaml.tmp manifests/vote/deployment.yaml
          fi
          
          if git diff --quiet manifests/vote/deployment.yaml; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add manifests/vote/deployment.yaml
          git commit -m "üöÄüîê Deploy signed image v2-${{ github.sha }}"
          
          # Robust push with retry
          for i in {1..5}; do
            if git push origin HEAD:main; then
              echo "‚úÖ Successfully pushed changes"
              break
            else
              echo "‚ùå Push failed, retrying..."
              git fetch origin main
              git rebase origin/main
              if [ $i -eq 5 ]; then
                echo "‚ùå Failed after 5 attempts"
                exit 1
              fi
              sleep $((i * 2))
            fi
          done

      - name: Upload SARIF
        if: always() && hashFiles('sarif.json') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.json

      - name: Archive Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SERVICE}}-scan-${{ github.sha }}
          path: |
            sarif.json
            scan-result.json
          if-no-files-found: ignore
